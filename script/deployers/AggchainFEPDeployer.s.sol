// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/aggchains/AggchainFEP.sol";
import {ProxyAdmin} from "@openzeppelin/contracts5/proxy/transparent/ProxyAdmin.sol";
import {
    TransparentUpgradeableProxy,
    ITransparentUpgradeableProxy
} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract AggchainFEPDeployer is Script {
    AggchainFEP internal aggchainFEP;
    ProxyAdmin internal aggchainFEPProxyAdmin;
    address internal aggchainFEPImplementation;

    function deployAggchainFEPTransparent(
        address proxyAdminOwner,
        IPolygonZkEVMGlobalExitRootV2 _globalExitRootManager,
        IERC20Upgradeable _pol,
        IPolygonZkEVMBridgeV2 _bridgeAddress,
        PolygonRollupManager _rollupManager,
        AggLayerGateway _aggLayerGateway,
        bytes memory initializeBytesCustomChain
    ) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeCall(AggchainFEP.initialize, (initializeBytesCustomChain));

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        aggchainFEPImplementation =
            address(new AggchainFEP(_globalExitRootManager, _pol, _bridgeAddress, _rollupManager, _aggLayerGateway));
        aggchainFEP =
            AggchainFEP(address(new TransparentUpgradeableProxy(aggchainFEPImplementation, proxyAdminOwner, initData)));

        vm.stopBroadcast();

        aggchainFEPProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(aggchainFEP), hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (aggchainFEPImplementation, address(aggchainFEPProxyAdmin), address(aggchainFEP));
    }

    function deployAggchainFEPImplementation(
        IPolygonZkEVMGlobalExitRootV2 _globalExitRootManager,
        IERC20Upgradeable _pol,
        IPolygonZkEVMBridgeV2 _bridgeAddress,
        PolygonRollupManager _rollupManager,
        AggLayerGateway _aggLayerGateway
    ) internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation =
            address(new AggchainFEP(_globalExitRootManager, _pol, _bridgeAddress, _rollupManager, _aggLayerGateway));
        vm.stopBroadcast();
    }
}
