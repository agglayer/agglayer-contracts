// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/consensus/pessimistic/PolygonPessimisticConsensus.sol";
import {ProxyAdmin} from "@openzeppelin/contracts5/proxy/transparent/ProxyAdmin.sol";
import {
    TransparentUpgradeableProxy,
    ITransparentUpgradeableProxy
} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract PolygonPessimisticConsensusDeployer is Script {
    PolygonPessimisticConsensus internal polygonPessimisticConsensus;
    ProxyAdmin internal polygonPessimisticConsensusProxyAdmin;
    address internal polygonPessimisticConsensusImplementation;

    function deployPolygonPessimisticConsensusTransparent(
        address proxyAdminOwner,
        IPolygonZkEVMGlobalExitRootV2 _globalExitRootManager,
        IERC20Upgradeable _pol,
        IPolygonZkEVMBridgeV2 _bridgeAddress,
        PolygonRollupManager _rollupManager,
        address _admin,
        address sequencer,
        uint32,
        address _gasTokenAddress,
        string memory sequencerURL,
        string memory _networkName
    ) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeWithSignature(
            "initialize(address,address,address,string,string)",
            _admin,
            sequencer,
            _gasTokenAddress,
            sequencerURL,
            _networkName
        );

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        polygonPessimisticConsensusImplementation =
            address(new PolygonPessimisticConsensus(_globalExitRootManager, _pol, _bridgeAddress, _rollupManager));
        polygonPessimisticConsensus = PolygonPessimisticConsensus(
            address(
                new TransparentUpgradeableProxy(polygonPessimisticConsensusImplementation, proxyAdminOwner, initData)
            )
        );

        vm.stopBroadcast();

        polygonPessimisticConsensusProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(polygonPessimisticConsensus),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (
            polygonPessimisticConsensusImplementation,
            address(polygonPessimisticConsensusProxyAdmin),
            address(polygonPessimisticConsensus)
        );
    }

    function deployPolygonPessimisticConsensusImplementation(
        IPolygonZkEVMGlobalExitRootV2 _globalExitRootManager,
        IERC20Upgradeable _pol,
        IPolygonZkEVMBridgeV2 _bridgeAddress,
        PolygonRollupManager _rollupManager
    ) internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation =
            address(new PolygonPessimisticConsensus(_globalExitRootManager, _pol, _bridgeAddress, _rollupManager));
        vm.stopBroadcast();
    }
}
