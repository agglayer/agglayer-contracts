// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/AggLayerGateway.sol";
import {ProxyAdmin} from "@openzeppelin/contracts5/proxy/transparent/ProxyAdmin.sol";
import {
    TransparentUpgradeableProxy,
    ITransparentUpgradeableProxy
} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract AggLayerGatewayDeployer is Script {
    AggLayerGateway internal aggLayerGateway;
    ProxyAdmin internal aggLayerGatewayProxyAdmin;
    address internal aggLayerGatewayImplementation;

    function deployAggLayerGatewayTransparent(
        address proxyAdminOwner,
        address defaultAdmin,
        address aggchainDefaultVKeyRole,
        address addRouteRole,
        address freezeRouteRole
    ) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeCall(
            AggLayerGateway.initialize, (defaultAdmin, aggchainDefaultVKeyRole, addRouteRole, freezeRouteRole)
        );

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        aggLayerGatewayImplementation = address(new AggLayerGateway());
        aggLayerGateway = AggLayerGateway(
            address(new TransparentUpgradeableProxy(aggLayerGatewayImplementation, proxyAdminOwner, initData))
        );

        vm.stopBroadcast();

        aggLayerGatewayProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(aggLayerGateway),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (aggLayerGatewayImplementation, address(aggLayerGatewayProxyAdmin), address(aggLayerGateway));
    }

    function deployAggLayerGatewayImplementation() internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new AggLayerGateway());
        vm.stopBroadcast();
    }
}
