// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/sovereignChains/GlobalExitRootManagerL2SovereignChain.sol";
import {ProxyAdmin} from "@openzeppelin/contracts5/proxy/transparent/ProxyAdmin.sol";
import {
    TransparentUpgradeableProxy,
    ITransparentUpgradeableProxy
} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract GlobalExitRootManagerL2SovereignChainDeployer is Script {
    GlobalExitRootManagerL2SovereignChain internal globalExitRootManagerL2SovereignChain;
    ProxyAdmin internal globalExitRootManagerL2SovereignChainProxyAdmin;
    address internal globalExitRootManagerL2SovereignChainImplementation;

    function deployGlobalExitRootManagerL2SovereignChainTransparent(
        address proxyAdminOwner,
        address _bridgeAddress,
        address _globalExitRootUpdater,
        address _globalExitRootRemover
    ) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeCall(
            GlobalExitRootManagerL2SovereignChain.initialize, (_globalExitRootUpdater, _globalExitRootRemover)
        );

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        globalExitRootManagerL2SovereignChainImplementation =
            address(new GlobalExitRootManagerL2SovereignChain(_bridgeAddress));
        globalExitRootManagerL2SovereignChain = GlobalExitRootManagerL2SovereignChain(
            address(
                new TransparentUpgradeableProxy(
                    globalExitRootManagerL2SovereignChainImplementation, proxyAdminOwner, initData
                )
            )
        );

        vm.stopBroadcast();

        globalExitRootManagerL2SovereignChainProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(globalExitRootManagerL2SovereignChain),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (
            globalExitRootManagerL2SovereignChainImplementation,
            address(globalExitRootManagerL2SovereignChainProxyAdmin),
            address(globalExitRootManagerL2SovereignChain)
        );
    }

    function deployGlobalExitRootManagerL2SovereignChainImplementation(address _bridgeAddress)
        internal
        returns (address implementation)
    {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new GlobalExitRootManagerL2SovereignChain(_bridgeAddress));
        vm.stopBroadcast();
    }
}
