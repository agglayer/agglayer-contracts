// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/aggchains/AggchainECDSA.sol";
import {ProxyAdmin} from "@openzeppelin/contracts5/proxy/transparent/ProxyAdmin.sol";
import {
    TransparentUpgradeableProxy,
    ITransparentUpgradeableProxy
} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract AggchainECDSADeployer is Script {
    AggchainECDSA internal aggchainECDSA;
    ProxyAdmin internal aggchainECDSAProxyAdmin;
    address internal aggchainECDSAImplementation;

    function deployAggchainECDSATransparent(
        address proxyAdminOwner,
        IPolygonZkEVMGlobalExitRootV2 _globalExitRootManager,
        IERC20Upgradeable _pol,
        IPolygonZkEVMBridgeV2 _bridgeAddress,
        PolygonRollupManager _rollupManager,
        IAggLayerGateway _aggLayerGateway,
        bytes memory initializeBytesAggchain
    ) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeCall(AggchainECDSA.initialize, (initializeBytesAggchain));

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        aggchainECDSAImplementation =
            address(new AggchainECDSA(_globalExitRootManager, _pol, _bridgeAddress, _rollupManager, _aggLayerGateway));
        aggchainECDSA = AggchainECDSA(
            address(new TransparentUpgradeableProxy(aggchainECDSAImplementation, proxyAdminOwner, initData))
        );

        vm.stopBroadcast();

        aggchainECDSAProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(aggchainECDSA),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (aggchainECDSAImplementation, address(aggchainECDSAProxyAdmin), address(aggchainECDSA));
    }

    function deployAggchainECDSAImplementation(
        IPolygonZkEVMGlobalExitRootV2 _globalExitRootManager,
        IERC20Upgradeable _pol,
        IPolygonZkEVMBridgeV2 _bridgeAddress,
        PolygonRollupManager _rollupManager,
        IAggLayerGateway _aggLayerGateway
    ) internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation =
            address(new AggchainECDSA(_globalExitRootManager, _pol, _bridgeAddress, _rollupManager, _aggLayerGateway));
        vm.stopBroadcast();
    }
}
