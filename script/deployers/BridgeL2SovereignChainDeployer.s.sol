// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "contracts/sovereignChains/BridgeL2SovereignChain.sol";
import {ProxyAdmin} from "@openzeppelin/contracts5/proxy/transparent/ProxyAdmin.sol";
import {
    TransparentUpgradeableProxy,
    ITransparentUpgradeableProxy
} from "@openzeppelin/contracts5/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract BridgeL2SovereignChainDeployer is Script {
    BridgeL2SovereignChain internal bridgeL2SovereignChain;
    ProxyAdmin internal bridgeL2SovereignChainProxyAdmin;
    address internal bridgeL2SovereignChainImplementation;

    function deployBridgeL2SovereignChainTransparent(
        address proxyAdminOwner,
        uint32 _networkID,
        address _gasTokenAddress,
        uint32 _gasTokenNetwork,
        IBasePolygonZkEVMGlobalExitRoot _globalExitRootManager,
        address _polygonRollupManager,
        bytes memory _gasTokenMetadata,
        address _bridgeManager,
        address _sovereignWETHAddress,
        bool _sovereignWETHAddressIsNotMintable
    ) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeWithSignature(
            "initialize(address,uint32,address,uint32,address,address,bytes,address,bool)",
            _networkID,
            _gasTokenAddress,
            _gasTokenNetwork,
            _globalExitRootManager,
            _polygonRollupManager,
            _gasTokenMetadata,
            _bridgeManager,
            _sovereignWETHAddress,
            _sovereignWETHAddressIsNotMintable
        );

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        bridgeL2SovereignChainImplementation = address(new BridgeL2SovereignChain());
        bridgeL2SovereignChain = BridgeL2SovereignChain(
            address(new TransparentUpgradeableProxy(bridgeL2SovereignChainImplementation, proxyAdminOwner, initData))
        );

        vm.stopBroadcast();

        bridgeL2SovereignChainProxyAdmin = ProxyAdmin(
            address(
                uint160(
                    uint256(
                        vm.load(
                            address(bridgeL2SovereignChain),
                            hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
                        )
                    )
                )
            )
        );

        return (
            bridgeL2SovereignChainImplementation,
            address(bridgeL2SovereignChainProxyAdmin),
            address(bridgeL2SovereignChain)
        );
    }

    function deployBridgeL2SovereignChainImplementation() internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new BridgeL2SovereignChain());
        vm.stopBroadcast();
    }
}
